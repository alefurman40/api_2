#region Using

using gcmAPI.Models.Utilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

#endregion

namespace gcmAPI.Models.LTL
{

    #region Structs

    public struct On_time_info
    {
        public int delivOnTime, delivLate;
        public string onTimePercent;
        public string carName, origState, destState;
    }

    #endregion

    public class Repository
    {
        QuoteData quoteData;
        LTLPiece[] m_lPiece;
        HelperFuncs.AccessorialsObj AccessorialsObj;

        public Repository(ref QuoteData quoteData)
        {
            this.quoteData = quoteData;
            m_lPiece = quoteData.m_lPiece;
            AccessorialsObj = quoteData.AccessorialsObj;
        }

        #region LTLSaveLog

        public void LTLSaveLog(string dest, string useAccount, string orig, ref int newLogId)
        {
            string sql = string.Empty;
            try
            {

                string Length = "-1", Width = "-1", Height = "-1", Units = "-1", Pieces = "-1", freight_class = "NULL";

                using (SqlConnection conn = new SqlConnection(System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aesrater_dataConnectionStringSS"].ConnectionString))
                {
                    using (SqlCommand comm = new SqlCommand())
                    {
                        comm.Connection = conn;
                        sql = "INSERT INTO SQL_STATS_GCM (UserName, Type, Direction, Service, Origin, Destination, Day, Count, Completed, Source) " +
                            "VALUES ('" + useAccount + "', 'LTL', 'Domestic', 'D2D', '" + orig + "', '" + dest +
                            "', '" + DateTime.Now.Date.ToString("MM/dd/yyyy") + "', 1, 'NO', 'LiveGCM')";

                        comm.CommandText = sql;
                        conn.Open();
                        comm.ExecuteNonQuery();

                        newLogId = HelperFuncs.GetLastAutogeneratedID(comm);
                        //DB.Log("gcm_stats_ltl", newLogId.ToString());

                        insertIntoAccessorials(newLogId); // Save quote accessorials

                        // Insert into AAFES

                        for (byte i = 0; i < m_lPiece.Length; i++)
                        {
                            #region Set to -1 instead of 0

                            if (m_lPiece[i].Length > 0)
                            {
                                Length = m_lPiece[i].Length.ToString();
                                Width = m_lPiece[i].Width.ToString();
                                Height = m_lPiece[i].Height.ToString();
                            }
                            else
                            {
                                Length = "-1";
                                Width = "-1";
                                Height = "-1";
                            }

                            if (m_lPiece[i].Units > 0)
                            {
                                Units = m_lPiece[i].Units.ToString();
                            }
                            else
                            {
                                Units = "-1";
                            }

                            if (m_lPiece[i].Pieces > 0)
                            {
                                Pieces = m_lPiece[i].Pieces.ToString();
                            }
                            else
                            {
                                Pieces = "-1";
                            }

                            if (string.IsNullOrEmpty(m_lPiece[i].FreightClass))
                            {
                                freight_class = "NULL";
                            }
                            else
                            {
                                freight_class = m_lPiece[i].FreightClass;
                            }

                            #endregion

                            if (quoteData.mode.Equals("ws") && quoteData.username == AppCodeConstants.un_genera) // Genera
                            {
                                sql = string.Concat("INSERT INTO SQL_STATS_GCM_LTL (ID,Weight,Class,Commodity, Pcs, Units, DimsHt, DimsL, DimsW) ",
                                      "values (", newLogId, ",", m_lPiece[i].Weight, ",",
                                      freight_class, ",'", m_lPiece[i].Commodity,
                                      "',", Pieces, ",", Units, ",", Height, ",", Length, ",", Width, ")");
                            }
                            else
                            {
                                sql = string.Concat("INSERT INTO SQL_STATS_GCM_LTL (ID,Weight,Class,Commodity, Pcs, Units, DimsHt, DimsL, DimsW) ",
                                      "values (", newLogId, ",", quoteData.m_lPiece_actual[i].Weight, ",",
                                      freight_class, ",'", m_lPiece[i].Commodity,
                                      "',", Pieces, ",", Units, ",", Height, ",", Length, ",", Width, ")");
                            }



                            comm.CommandText = sql;
                            comm.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                DB.Log("gcm_stats_ltl", e.ToString() + " sql was: " + sql);
            }
        }

        #endregion

        #region UpdateSqlStatsAtEndOfRateQuote

        public void UpdateSqlStatsAtEndOfRateQuote(ref string trueDestZip, ref string trueOrigZip, ref GCMRateQuote[] totalQuotes)
        {
            int logId = 0;
            bool foundQuoteLog = false;
            using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringRater2009))
            {
                using (SqlCommand comm = new SqlCommand())
                {
                    comm.Connection = conn;
                    comm.CommandText = string.Concat("SELECT ID, Count FROM SQL_STATS_GCM WHERE UserName = '", quoteData.username,
                        "' AND Type='LTL' AND Direction = 'Domestic' AND Service = 'D2D' AND Origin = '", trueOrigZip,
                        "' AND Destination = '", trueDestZip,
                        "' AND Day = '", DateTime.Now.Date.ToString("MM/dd/yyyy"), "' ORDER BY ID DESC");

                    conn.Open();
                    using (SqlDataReader dr = comm.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            dr.Read();
                            logId = dr.GetInt32(dr.GetOrdinal("ID"));
                            foundQuoteLog = true;
                        }
                    }
                }
            }
            if (foundQuoteLog)
            {
                UpdateSqlStatsAtEndOfRateQuoteStep2(ref logId);
                InsertIntoSqlQuotes(ref logId, ref totalQuotes);
            }
        }

        #endregion

        #region UpdateSqlStatsAtEndOfRateQuoteStep2

        private void UpdateSqlStatsAtEndOfRateQuoteStep2(ref int logId)
        {
            using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringRater2009))
            {
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = conn;
                    conn.Open();
                    command.Connection = conn;
                    command.CommandText = string.Concat("UPDATE SQL_STATS_GCM SET Completed='YES',TopTransit='',",
                       "TopOnTime='',",
                       "TopCarrier='',",
                       "TopRate=-1", 
                       " WHERE ID=", logId);
                    command.ExecuteNonQuery();
                }
            }
        }

        #endregion

        #region InsertIntoSqlQuotes

        public void InsertIntoSqlQuotes(ref int logId, ref GCMRateQuote[] totalQuotes)
        {
            double coverageCost = 0;

            using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringRater2009))
            {
                using (SqlCommand command = new SqlCommand())
                {
                    conn.Open();
                    command.Connection = conn;

                    if (totalQuotes != null)
                    {
                        foreach (GCMRateQuote quote in totalQuotes)
                        {
                            coverageCost = GetACarrierInsuranceCoverageCost(quote);

                            command.CommandText = string.Concat("INSERT INTO SQL_STATS_GCM_LTL_QUOTES (ID,CarrierDisplayName,DeliveryDays,Liability, TotalPrice, CarrierKey, BookingKey, OurRate) ",
                                    "values (", logId, ",'", quote.DisplayName.Replace("<span style='color:Green;'> Guaranteed by 5PM</span>", ""), "',",
                                    quote.DeliveryDays, ",", coverageCost,
                                    ",", quote.TotalPrice, ",'", quote.CarrierKey, "','", quote.BookingKey, "','", quote.OurRate, "')");

                            command.ExecuteNonQuery();
                            coverageCost = 0;
                        }
                    }
                }
            }
        }

        #endregion

        #region insertIntoAccessorials

        public void insertIntoAccessorials(int logId)
        {
            List<string> accessorsList = new List<string>();
            //bool hazmat = false;

            #region accessors

            //for (int i = 1; i <= 4; i++)
            //{
            //    if (Request.QueryString["q_Weight" + i.ToString()] != null && !Request.QueryString["q_Weight" + i.ToString()].Equals(string.Empty))
            //    {
            //        if (Request.QueryString["q_HazMat" + i.ToString()] != null && Request.QueryString["q_HazMat" + i.ToString()].Equals("true"))
            //        {
            //            hazmat = true;
            //            break;
            //        }
            //    }
            //}
            if (quoteData.isHazmat == true)
            {
                accessorsList.Add("HAZ");
            }

            if (AccessorialsObj.MILIPU)
            {
                accessorsList.Add("MILIPU");
            }
            if (AccessorialsObj.MILIDEL)
            {
                accessorsList.Add("MILIDEL");
            }

            if (AccessorialsObj.LGPU)
            {
                accessorsList.Add("LGPU");
            }
            if (AccessorialsObj.LGDEL)
            {
                accessorsList.Add("LGDEL");
            }
            if (AccessorialsObj.RESPU)
            {
                accessorsList.Add("RESPU");
            }
            if (AccessorialsObj.RESDEL)
            {
                accessorsList.Add("RESDEL");
            }
            if (AccessorialsObj.CONPU)
            {
                accessorsList.Add("CONPU");
            }
            if (AccessorialsObj.CONDEL)
            {
                accessorsList.Add("CONDEL");
            }
            if (AccessorialsObj.APTPU)
            {
                accessorsList.Add("APTPU");
            }
            if (AccessorialsObj.APTDEL)
            {
                accessorsList.Add("APTDEL");
            }
            if (AccessorialsObj.TRADEPU)
            {
                accessorsList.Add("TRADEPU");
            }
            if (AccessorialsObj.TRADEDEL)
            {
                accessorsList.Add("TRADEDEL");
            }
            if (AccessorialsObj.INSDEL)
            {
                accessorsList.Add("INSDEL");
            }

            #endregion

            try
            {
                using (SqlConnection conn = new SqlConnection(System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aesrater_dataConnectionStringSS"].ConnectionString))
                {
                    using (SqlCommand command = new SqlCommand())
                    {
                        conn.Open();
                        command.Connection = conn;
                        string sql;

                        foreach (string acc in accessorsList)
                        {
                            sql = "INSERT INTO SQL_STATS_GCM_LTL_ACCESSORIALS (ID,AccessorialCode) " +
                                    "values (" + logId + ",'" + acc + "')";

                            command.CommandText = sql;
                            command.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                DB.Log("Sql_Accessorials", e.ToString());
            }
        }

        #endregion

        #region Insert_into_AAFES_quotes

        public void Insert_into_AAFES_quotes(ref int newLogId)
        {
            try
            {
                Int16 cube = 0;

                Int16.TryParse(quoteData.txtCommodityCubicFeet, out cube);

                string sql;

                sql = string.Concat("INSERT INTO AAFES_Quote_Info (Cube, QuoteID,PO) ",
                             "VALUES (", cube, ",", newLogId, ",'", quoteData.txtAAFES_Quote_PO, "'", ")");

                using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringLTLRater))
                {
                    using (SqlCommand command = new SqlCommand())
                    {
                        conn.Open();
                        command.Connection = conn;

                        command.CommandText = sql;
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception e)
            {
                DB.Log("Sql_Accessorials", e.ToString());
            }
        }

        #endregion

        #region  CalculateCoverageCost

        public void CalculateCoverageCost(byte i, ref GCMRateQuote[] totalQuotes, ref bool isHawaiiDest)
        {
            // Here we set the coverage cost fixed 100
            double coverageCost = 0.0;

            if (isHawaiiDest == true)
            {
                coverageCost = 50.0;
                if (AccessorialsObj.RESDEL || AccessorialsObj.LGDEL)
                {
                    totalQuotes[i].DeliveryDays += 1;
                }
            }
            else if (totalQuotes[i].DisplayName.Contains("RRD Truckload"))
            {
                coverageCost = 100000.0;
            }
            else if (totalQuotes[i].DisplayName.Contains("Volume"))
            {
                coverageCost = quoteData.totalWeight;
            }
            else
            {
                coverageCost = GetACarrierInsuranceCoverageCost(totalQuotes[i]);
            }

            coverageCost = coverageCost / quoteData.totalWeight;
            totalQuotes[i].CoverageCost = Convert.ToDouble(string.Format("{0:0.00}", coverageCost));
        }

        #endregion

        #region Get acarrier insurance

        #region getACarrierInsuranceCoverageCost

        private double GetACarrierInsuranceCoverageCost(GCMRateQuote rate)
        {
            string carrierKey = rate.CarrierKey;
            // If ups parcel return 100
            if (carrierKey.Equals("Forward Air"))
            {
                return 50;
            }
            else if (carrierKey.ToUpper().Contains("UPS") &&
                (rate.DisplayName.ToUpper().Contains("GROUND") || rate.DisplayName.ToUpper().Contains("DAY")))
            {
                return 100;
            }
            else
            {

                double coverageCost = 0;

                for (int i = 0; i < m_lPiece.Length; i++)
                {
                    if ((!string.IsNullOrEmpty(m_lPiece[i].FreightClass) && !m_lPiece[i].FreightClass.Equals("-1"))
                        || carrierKey == "Central Transport") //|| carrierKey == "ALG Worldwide"
                    {
                        double insRate = GetACarrierInsuranceCoverageRate(carrierKey, m_lPiece[i].FreightClass, m_lPiece[i].Commodity);
                        coverageCost += m_lPiece[i].Weight * insRate;
                    }
                }

                return coverageCost;
            }
        }

        #endregion

        // Not used, Special function for NITF (Expedited)
        #region getACarrierInsuranceCoverageCost

        //private double getACarrierInsuranceCoverageCost(string carrierKey)
        //{
        //    double coverageCost = 0;

        //    for (int i = 0; i < m_lPiece.Length; i++)
        //    {
        //        if (!string.IsNullOrEmpty(m_lPiece[i].FreightClass) && !m_lPiece[i].FreightClass.Equals("-1"))
        //        {
        //            double insRate = getACarrierInsuranceCoverageRate(carrierKey, m_lPiece[i].FreightClass, m_lPiece[i].Commodity);
        //            coverageCost += m_lPiece[i].Weight * insRate;
        //        }
        //    }

        //    return coverageCost;
        //}

        #endregion

        #region getACarrierInsuranceCoverageRate

        private double GetACarrierInsuranceCoverageRate(string carrierKey, string trueClass, string commodity)
        {
            string sql = "";
            int carrierId = 0;
            double insRate = 0;

            using (SqlConnection conn = new SqlConnection(
                System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aes_daylightSS"].ConnectionString))
            {
                conn.Open();
                using (SqlCommand comm = new SqlCommand())
                {
                    comm.Connection = conn;

                    sql = string.Concat("select * from SQL_LTLCARRIERS where CarrierKey='", carrierKey, "'");
                    comm.CommandText = sql;
                    using (SqlDataReader dr = comm.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            dr.Read();
                            carrierId = dr.GetInt32(dr.GetOrdinal("ID"));
                        }
                    }

                    if (carrierKey == "Central Transport") //carrierKey == "ALG Worldwide" || 
                    {
                        sql = string.Concat("select ins.Insurance as InsuranceRate from SQL_INSURANCE ins inner join"
                        , " SQL_FAKS f on ins.CarrierId=f.CarrierId"
                        , " where ins.CarrierId=", carrierId.ToString(), " and ins.Commodity='", commodity, "'");
                    }
                    else
                    {
                        sql = string.Concat("select ins.Insurance as InsuranceRate from SQL_INSURANCE ins inner join"
                        , " SQL_FAKS f on ins.CarrierId=f.CarrierId and ins.RatedClass=f.RatedClass"
                        , " where ins.CarrierId=", carrierId.ToString(), " and f.TrueClass=", trueClass, " and ins.Commodity='", commodity, "'");
                        //DB.Log("TP Freight (Live)", carrierId.ToString() + " " + trueClass, "");
                    }

                    comm.CommandText = sql;

                    using (SqlDataReader dr = comm.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            dr.Read();
                            insRate = dr.GetDouble(dr.GetOrdinal("InsuranceRate"));
                            //DB.Log("TP Freight (Live)", carrierKey + " " + insRate.ToString(), "");
                        }
                    }
                }
            }
            return insRate;

        }

        #endregion

        #endregion
        
        #region GetLTLMarkup

        public int GetLTLMarkup()
        {
            int intLTLMarkup = 0;
            using (SqlConnection conn = new SqlConnection(System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aesmain_dataConnectionStringSS"].ConnectionString))
            {
                conn.Open();
                using (SqlCommand comm = new SqlCommand(
                    string.Concat("select LTLMarkup from tbl_LOGIN where UserName='", quoteData.username, "'"), conn))
                {
                    //DB.Log("getMarkup", "select LTLMarkup from tbl_LOGIN where UserName='" + Session["svUserID"].ToString() + "'");

                    using (SqlDataReader dr = comm.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (dr["LTLMarkup"] != DBNull.Value)
                            {
                                intLTLMarkup = Convert.ToInt32(dr["LTLMarkup"]);
                            }
                        }
                    }
                }
            }

            return intLTLMarkup;

        }

        #endregion

        #region queryCarrierNotes

        public string QueryCarrierNotes(string carKey)
        {
            string notes = "";

            try
            {
                using (SqlConnection conn = new SqlConnection(System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aes_daylightSS"].ConnectionString))
                {
                    using (SqlCommand comm = new SqlCommand())
                    {
                        string sql = "";

                        sql = "SELECT Notes " +
                       "FROM SQL_LTLCARRIERS " +
                       "WHERE CarrierKey =" + "'" + carKey + "'";
                        conn.Open();
                        comm.Connection = conn;
                        comm.CommandText = sql;
                        using (SqlDataReader dr = comm.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                if (dr["Notes"] != DBNull.Value)
                                {
                                    notes = (string)dr["Notes"];
                                }
                            }
                        }

                        return notes;
                    }
                }
            }
            catch (Exception cE)
            {
                DB.Log("Query Carrier Notes (Live)", cE.ToString());
                return notes;
            }
        }

        #endregion

        #region Get_on_time_info_by_scac

        public static On_time_info Get_on_time_info_by_scac(string origState, string destState, string scac)
        {

            On_time_info carOnTime = new On_time_info();
            try
            {
                using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringLTLRater))
                {

                    using (SqlCommand comm = new SqlCommand())
                    {
                        string sql = string.Concat("SELECT CarName, DelivOnTime, DelivLate " +
                       "FROM ON_TIME_PERCENT ",
                       "WHERE OrigState='", origState, "' AND DestState='", destState, "' ",
                       "AND SCAC='", scac, "'");
                        conn.Open();
                        comm.Connection = conn;
                        comm.CommandText = sql;
                        using (SqlDataReader dr = comm.ExecuteReader())
                        {

                            if (dr.Read())
                            {
                                carOnTime.carName = (string)dr["CarName"];
                                carOnTime.delivOnTime = (int)dr["DelivOnTime"];
                                carOnTime.delivLate = (int)dr["DelivLate"];

                                if ((carOnTime.delivOnTime + carOnTime.delivLate) > 0)
                                {
                                    carOnTime.onTimePercent =
                                        Math.Round(
                                            (double)carOnTime.delivOnTime /
                                            (carOnTime.delivOnTime + carOnTime.delivLate) * 100, 1).ToString(); // calculate percentage
                                }
                                else
                                {
                                    carOnTime.onTimePercent = "No Data"; //in case there were no shipments for this combination of carrier and states - giving the benefit of a doubt with 100% on time.
                                }
                                //onTimeDict.Add(carOnTime.carName, carOnTime);
                                //HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", "@" + carOnTime.carName + "@", "");
                            }
                        }
                    }
                }
                return carOnTime;
                //HttpContext.Current.Session["onTimeDict"] = onTimeDict; //save the stats in session variable
            }
            catch (Exception cE)
            {
                HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", cE.ToString());
                return carOnTime;
            }
        }

        #endregion

        #region Get_on_time_staticstics_for_carrier

        public static On_time_info Get_on_time_staticstics_for_carrier(
            string origState, string destState, string carrier)
        {

            On_time_info carOnTime = new On_time_info();
            try
            {
                using (SqlConnection conn = new SqlConnection(AppCodeConstants.connStringLTLRater))
                {

                    using (SqlCommand comm = new SqlCommand())
                    {
                        string sql = string.Concat("SELECT CarName, DelivOnTime, DelivLate " +
                       "FROM ON_TIME_PERCENT ",
                       "WHERE OrigState='", origState, "' AND DestState='", destState, "' ",
                       "AND CarName='", carrier, "'");
                        conn.Open();
                        comm.Connection = conn;
                        comm.CommandText = sql;
                        using (SqlDataReader dr = comm.ExecuteReader())
                        {

                            if (dr.Read())
                            {
                                carOnTime.carName = (string)dr["CarName"];
                                carOnTime.delivOnTime = (int)dr["DelivOnTime"];
                                carOnTime.delivLate = (int)dr["DelivLate"];

                                if ((carOnTime.delivOnTime + carOnTime.delivLate) > 0)
                                {
                                    carOnTime.onTimePercent =
                                        Math.Round(
                                            (double)carOnTime.delivOnTime /
                                            (carOnTime.delivOnTime + carOnTime.delivLate) * 100, 1).ToString(); // calculate percentage
                                }
                                else
                                {
                                    carOnTime.onTimePercent = "No Data"; //in case there were no shipments for this combination of carrier and states - giving the benefit of a doubt with 100% on time.
                                }
                                //onTimeDict.Add(carOnTime.carName, carOnTime);
                                //HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", "@" + carOnTime.carName + "@", "");
                            }
                        }
                    }
                }
                return carOnTime;
                //HttpContext.Current.Session["onTimeDict"] = onTimeDict; //save the stats in session variable
            }
            catch (Exception cE)
            {
                HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", cE.ToString());
                return carOnTime;
            }
        }

        #endregion

        #region queryOnTimePercentsFromDB

        public static void queryOnTimePercentsFromDB(string origState, string destState)
        {
            Dictionary<string, On_time_info> onTimeDict = new Dictionary<string, On_time_info>();
            On_time_info carOnTime = new On_time_info();

            SqlConnection conn = new SqlConnection(AppCodeConstants.connStringLTLRater);

            SqlCommand comm = new SqlCommand();
            try
            {
                string sql = "";

                sql = "SELECT CarName, DelivOnTime, DelivLate " +
               "FROM ON_TIME_PERCENT " +
               "WHERE OrigState =" + "'" + origState + "' AND DestState='" + destState + "'";
                conn.Open();
                comm.Connection = conn;
                comm.CommandText = sql;
                SqlDataReader dr = comm.ExecuteReader();

                while (dr.Read())
                {
                    carOnTime.carName = (string)dr["CarName"];
                    carOnTime.delivOnTime = (int)dr["DelivOnTime"];
                    carOnTime.delivLate = (int)dr["DelivLate"];

                    if ((carOnTime.delivOnTime + carOnTime.delivLate) > 0)
                        carOnTime.onTimePercent = Math.Round(((double)carOnTime.delivOnTime / (carOnTime.delivOnTime + carOnTime.delivLate) * 100), 1).ToString(); // calculate percentage
                    else
                        carOnTime.onTimePercent = "No Data"; //in case there were no shipments for this combination of carrier and states - giving the benefit of a doubt with 100% on time.

                    onTimeDict.Add(carOnTime.carName, carOnTime);
                    //HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", "@" + carOnTime.carName + "@", "");
                }

                dr.Close();
                conn.Close();
                conn.Dispose();
                comm.Dispose();

                //HttpContext.Current.Session["onTimeDict"] = onTimeDict; //save the stats in session variable
            }
            catch (Exception cE)
            {
                try
                {
                    conn.Close();
                    conn.Dispose();
                    comm.Dispose();
                }
                catch
                {
                }
                HelperFuncs.writeToSiteErrors("Query Cars On Time (Live)", cE.ToString(), "");
            }
        }

        #endregion


        #region Get Hawaii / Alaska Rate

        #region GetHawaiiOrigRate

        public double GetHawaiiOrigRate(string zip)
        {
            string connString = System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aes_daylightSS"].ConnectionString;
            SqlConnection dbConn = new SqlConnection(connString);
            dbConn.Open();
            //bool hasHazMat = false;

            string sql = "SELECT ";

            if (quoteData.totalCube < 101)
            {
                sql += "LT101CF";
            }
            else if (quoteData.totalCube < 201)
            {
                sql += "LT201CF";
            }
            else if (quoteData.totalCube < 301)
            {
                sql += "LT301CF";
            }
            else if (quoteData.totalCube < 401)
            {
                sql += "LT401CF";
            }
            else
            {
                sql += "MT400CF";
            }

            sql += ", MIN, SQL_HAWAII_RATES.ZONE FROM SQL_HAWAII_RATES, SQL_HAWAII_ZONES WHERE SQL_HAWAII_RATES.ZONE = SQL_HAWAII_ZONES.ZONE AND ZIPCODE = " + zip;

            DataSet ds1 = new DataSet();
            SqlDataAdapter da1 = new SqlDataAdapter(sql, dbConn);
            ds1.Clear();
            da1.Fill(ds1, "rate");

            double rate = 0;
            double min = 0;
            double zone = 0;

            if (ds1.Tables["rate"].Rows.Count == 1)
            {
                rate = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(0).ToString());
                min = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(1).ToString());
                zone = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(2).ToString());
                rate += .7;
            }
            else
            {
                return 99999;
            }

            rate = rate * quoteData.totalCube;

            if (rate < min)
            {
                rate = min;
            }

            if (AccessorialsObj.INSDEL)
            {
                rate += 9999;
            }
            //if (Request.QueryString["q_InsPick"].Equals("true"))
            //{
            //    rate += 9999;
            //}
            if (AccessorialsObj.RESDEL)
            {
                rate += 25;
            }
            if (AccessorialsObj.RESPU)
            {
                rate += 25;
            }
            if (AccessorialsObj.LGPU)
            {
                rate += 35;
            }
            if (AccessorialsObj.LGDEL)
            {
                rate += 35;
            }
            if (quoteData.isHazmat)
            {
                rate += 210;
            }

            if (zone >= 7 && zone <= 11)
            {
                rate = rate + (rate * .0475);
            }

            return rate;
        }

        #endregion

        #region GetHawaiiDestRate

        public double GetHawaiiDestRate(string zip)
        {
            double rate = 0;
            double min = 0;
            double zone = 0;

            string sql = "SELECT ";

            DB.Log("total cube", quoteData.totalCube.ToString());

            if (quoteData.totalCube < 101)
            {
                sql += "LT101CF";
            }
            else if (quoteData.totalCube < 201)
            {
                sql += "LT201CF";
            }
            else if (quoteData.totalCube < 301)
            {
                sql += "LT301CF";
            }
            else if (quoteData.totalCube < 401)
            {
                sql += "LT401CF";
            }
            else
            {
                sql += "MT400CF";
            }

            sql += ", MIN, SQL_HAWAII_RATES.ZONE FROM SQL_HAWAII_RATES, SQL_HAWAII_ZONES WHERE SQL_HAWAII_RATES.ZONE = SQL_HAWAII_ZONES.ZONE AND ZIPCODE = " + zip;

            DB.Log("total cube sql", sql);

            string connString = System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aes_daylightSS"].ConnectionString;
            using (SqlConnection dbConn = new SqlConnection(connString))
            {
                dbConn.Open();

                using (DataSet ds1 = new DataSet())
                {
                    using (SqlDataAdapter da1 = new SqlDataAdapter(sql, dbConn))
                    {
                        ds1.Clear();
                        da1.Fill(ds1, "rate");

                        if (ds1.Tables["rate"].Rows.Count == 1)
                        {
                            rate = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(0).ToString());
                            min = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(1).ToString());
                            zone = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(2).ToString());
                        }
                        else
                        {
                            return 99999;
                        }
                    }
                }
            }

            rate = rate * quoteData.totalCube;

            if (rate < min)
            {
                rate = min;
            }

            if (AccessorialsObj.INSDEL)
            {
                rate += 9999;
            }
            //if (Request.QueryString["q_InsPick"].Equals("true"))
            //{
            //    rate += 9999;
            //}
            if (AccessorialsObj.RESDEL)
            {
                rate += 25;
            }
            if (AccessorialsObj.RESPU)
            {
                rate += 25;
            }
            if (AccessorialsObj.LGPU)
            {
                rate += 35;
            }
            if (AccessorialsObj.LGDEL)
            {
                rate += 35;
            }
            if (quoteData.isHazmat)
            {
                rate += 210;
            }

            if (zone >= 7 && zone <= 11)
            {
                rate = rate + (rate * .0475);
            }

            return rate;
        }

        #endregion

        #region GetAlaskaOrigRate

        public double GetAlaskaOrigRate(string zip)
        {
            double rate = 0;
            double totalWeight = 0;

            GetAlaskaRate(ref rate, ref totalWeight, ref zip);

            #region Accessorials

            if (AccessorialsObj.INSDEL && AccessorialsObj.RESDEL)    // 1,5
            {
                //res
                if (2.1 * (totalWeight / 100) > 105)
                {
                    rate += 2.1 * (totalWeight / 100);
                }
                else
                {
                    rate += 105;
                }

                //inside	
                if (2.8 * (totalWeight / 100) > 60)
                {
                    rate += 1.6 * (totalWeight / 100);
                }
                else
                {
                    rate += 42.5;
                }
            }
            else if (!AccessorialsObj.INSDEL && AccessorialsObj.RESDEL)    // 2,6
            {
                //res
                if (2.1 * (totalWeight / 100) > 105)
                {
                    rate += 2.1 * (totalWeight / 100);
                }
                else
                {
                    rate += 105;
                }
            }
            else if (AccessorialsObj.INSDEL && !AccessorialsObj.RESDEL)    // 3,7
            {
                //lift
                if (2.25 * (totalWeight / 100) > 60)
                {
                    rate += 2.25 * (totalWeight / 100);
                }
                else
                {
                    rate += 60;
                }

                //inside	
                if (2.8 * (totalWeight / 100) > 60)
                {
                    rate += 1.6 * (totalWeight / 100);
                }
                else
                {
                    rate += 42.5;
                }
            }
            else if (AccessorialsObj.INSDEL.Equals(false) && AccessorialsObj.RESDEL.Equals(false) && AccessorialsObj.LGDEL)    // 4
            {
                //lift
                if (2.25 * (totalWeight / 100) > 60)
                {
                    rate += 2.25 * (totalWeight / 100);
                }
                else
                {
                    rate += 60;
                }
            }
            #region Not used
            //if (Request.QueryString["q_InsPick"].Equals("true") && AccessorialsObj.RESPU)    // 1,5
            //{
            //    //res
            //    if (2.1 * (totalWeight / 100) > 105)
            //    {
            //        rate += 2.1 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 105;
            //    }

            //    //inside	
            //    if (2.8 * (totalWeight / 100) > 60)
            //    {
            //        rate += 1.6 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 42.5;
            //    }
            //}
            #endregion
            else if (AccessorialsObj.RESPU)    // 2,6
            {
                //res
                if (2.1 * (totalWeight / 100) > 105)
                {
                    rate += 2.1 * (totalWeight / 100);
                }
                else
                {
                    rate += 105;
                }
            }
            #region Not used
            //else if (Request.QueryString["q_InsPick"].Equals("true") && Request.QueryString["q_ResPick"].Equals("false"))    // 3,7
            //{
            //    //lift
            //    if (2.25 * (totalWeight / 100) > 60)
            //    {
            //        rate += 2.25 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 60;
            //    }

            //    //inside	
            //    if (2.8 * (totalWeight / 100) > 60)
            //    {
            //        rate += 1.6 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 42.5;
            //    }
            //}
            #endregion
            else if (AccessorialsObj.RESPU.Equals(false) && AccessorialsObj.LGPU)    // 4
            {
                //lift
                if (2.25 * (totalWeight / 100) > 60)
                {
                    rate += 2.25 * (totalWeight / 100);
                }
                else
                {
                    rate += 60;
                }
            }

            if (quoteData.isHazmat)
            {
                if (1.6 * (totalWeight / 100) > 42.5)
                {
                    rate += 1.6 * (totalWeight / 100);
                }
                else
                {
                    rate += 42.5;
                }
            }

            #endregion

            return rate;
        }

        #endregion

        #region GetAlaskaDestRate

        public double GetAlaskaDestRate(string zip)
        {

            double rate = 0;
            double totalWeight = 0;

            GetAlaskaRate(ref rate, ref totalWeight, ref zip);

            #region Accessorials

            if (AccessorialsObj.INSDEL && AccessorialsObj.RESDEL)    // 1,5
            {
                //res
                if (7.8 * (totalWeight / 100) > 250)
                {
                    rate += 7.8 * (totalWeight / 100);
                }
                else
                {
                    rate += 250;
                }

                //inside	
                if (3.25 * (totalWeight / 100) > 100)
                {
                    rate += 3.25 * (totalWeight / 100);
                }
                else
                {
                    rate += 100;
                }
            }
            else if (AccessorialsObj.INSDEL.Equals(false) && AccessorialsObj.RESDEL)    // 2,6
            {
                //res
                if (7.8 * (totalWeight / 100) > 250)
                {
                    rate += 7.8 * (totalWeight / 100);
                }
                else
                {
                    rate += 250;
                }
            }
            else if (AccessorialsObj.INSDEL && AccessorialsObj.RESDEL.Equals(false))    // 3,7
            {
                //lift
                if (2.75 * (totalWeight / 100) > 70)
                {
                    rate += 2.75 * (totalWeight / 100);
                }
                else
                {
                    rate += 70;
                }

                //inside	
                if (3.25 * (totalWeight / 100) > 100)
                {
                    rate += 3.25 * (totalWeight / 100);
                }
                else
                {
                    rate += 100;
                }
            }
            else if (AccessorialsObj.INSDEL.Equals(false) && AccessorialsObj.RESDEL.Equals(false) && AccessorialsObj.LGDEL)    // 4
            {
                //lift
                if (2.75 * (totalWeight / 100) > 70)
                {
                    rate += 2.75 * (totalWeight / 100);
                }
                else
                {
                    rate += 70;
                }
            }
            //if (Request.QueryString["q_InsPick"].Equals("true") && AccessorialsObj.RESPU)    // 1,5
            //{
            //    //res
            //    if (7.8 * (totalWeight / 100) > 250)
            //    {
            //        rate += 7.8 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 250;
            //    }

            //    //inside	
            //    if (3.25 * (totalWeight / 100) > 100)
            //    {
            //        rate += 3.25 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 100;
            //    }
            //}
            else if (AccessorialsObj.RESPU)    // 2,6
            {
                //res
                if (7.8 * (totalWeight / 100) > 250)
                {
                    rate += 7.8 * (totalWeight / 100);
                }
                else
                {
                    rate += 250;
                }
            }
            //else if (Request.QueryString["q_InsPick"].Equals("true") && Request.QueryString["q_ResPick"].Equals("false"))    // 3,7
            //{
            //    //lift
            //    if (2.75 * (totalWeight / 100) > 70)
            //    {
            //        rate += 2.75 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 70;
            //    }

            //    //inside	
            //    if (3.25 * (totalWeight / 100) > 100)
            //    {
            //        rate += 3.25 * (totalWeight / 100);
            //    }
            //    else
            //    {
            //        rate += 100;
            //    }
            //}
            else if (AccessorialsObj.RESPU.Equals(false) && AccessorialsObj.LGPU)    // 4
            {
                //lift
                if (2.75 * (totalWeight / 100) > 70)
                {
                    rate += 2.75 * (totalWeight / 100);
                }
                else
                {
                    rate += 70;
                }
            }
            if (quoteData.isHazmat)
            {
                if (1.6 * (totalWeight / 100) > 42.5)
                {
                    rate += 1.6 * (totalWeight / 100);
                }
                else
                {
                    rate += 42.5;
                }
            }

            #endregion

            return rate;
        }

        #endregion

        #region GetAlaskaRate

        private void GetAlaskaRate(ref double rate, ref double totalWeight, ref string zip)
        {
            string connString = System.Web.Configuration.WebConfigurationManager.ConnectionStrings["aes_daylightSS"].ConnectionString;

            //double totalWeight = 0;
            double multiplier = 0;

            Dictionary<string, double> classWeight = new Dictionary<string, double>();

            for (int i = 0; i < m_lPiece.Length; i++)
            {
                if (quoteData.hasFreightClass.Equals(true))
                {
                    if (classWeight.ContainsKey(m_lPiece[i].FreightClass))
                    {
                        classWeight[m_lPiece[i].FreightClass] += m_lPiece[i].Weight;
                    }
                    else
                    {
                        classWeight.Add(m_lPiece[i].FreightClass, m_lPiece[i].Weight);
                    }

                    totalWeight += m_lPiece[i].Weight;
                }
                else
                {
                    totalWeight += m_lPiece[i].Weight;
                }
            }

            #region Old code
            //for (int i = 1; i <= 4; i++)
            //{
            //    if (Request.QueryString["q_Class1"] != "-1" && Request.QueryString["q_Class1"] != "" && Request.QueryString["q_Class1"] != null)
            //    {
            //        if (Request.QueryString["q_Weight" + i.ToString()] != null && !Request.QueryString["q_Weight" + i.ToString()].Equals(string.Empty))
            //        {
            //            if (classWeight.ContainsKey(Request.QueryString["q_Class" + i.ToString()]))
            //            {
            //                classWeight[Request.QueryString["q_Class" + i.ToString()]] += Double.Parse(Request.QueryString["q_Weight" + i.ToString()]);
            //            }
            //            else
            //            {
            //                classWeight.Add(Request.QueryString["q_Class" + i.ToString()], Double.Parse(Request.QueryString["q_Weight" + i.ToString()]));
            //            }

            //            totalWeight += Double.Parse(Request.QueryString["q_Weight" + i.ToString()]);

            //        }
            //    }
            //    else if (Request.QueryString["q_Weight" + i.ToString()] != null && !Request.QueryString["q_Weight" + i.ToString()].Equals(string.Empty))
            //    {
            //        totalWeight += Double.Parse(Request.QueryString["q_Weight" + i.ToString()]);
            //    }

            //}
            #endregion

            string largestClass = "";
            double largestWeight = 0;

            if (quoteData.hasFreightClass.Equals(true))
            {
                foreach (KeyValuePair<string, double> kvp in classWeight)
                {
                    if (largestWeight < kvp.Value)
                    {
                        largestWeight = kvp.Value;
                        largestClass = kvp.Key;
                    }
                }

                #region Multiplier

                if (largestClass == "50")
                {
                    multiplier = .678;
                }
                else if (largestClass == "55")
                {
                    multiplier = .732;
                }
                else if (largestClass == "60")
                {
                    multiplier = .79;
                }
                else if (largestClass == "65")
                {
                    multiplier = .851;
                }
                else if (largestClass == "70")
                {
                    multiplier = .91;
                }
                else if (largestClass == "77.5")
                {
                    multiplier = 1;
                }
                else if (largestClass == "85")
                {
                    multiplier = 1.091;
                }
                else if (largestClass == "92.5")
                {
                    multiplier = 1.18;
                }
                else if (largestClass == "100")
                {
                    multiplier = 1.274;
                }
                else if (largestClass == "110")
                {
                    multiplier = 1.395;
                }
                else if (largestClass == "125")
                {
                    multiplier = 1.58;
                }
                else if (largestClass == "150")
                {
                    multiplier = 1.892;
                }
                else if (largestClass == "175")
                {
                    multiplier = 2.203;
                }
                else if (largestClass == "200")
                {
                    multiplier = 2.510;
                }
                else if (largestClass == "250")
                {
                    multiplier = 3.131;
                }
                else if (largestClass == "300")
                {
                    multiplier = 3.75;
                }
                else if (largestClass == "400")
                {
                    multiplier = 5.037;
                }
                else if (largestClass == "500")
                {
                    multiplier = 6.296;
                }

                #endregion
            }
            else
            {
                multiplier = 1;
            }

            #region SQL

            string sql = "SELECT ";

            if (totalWeight < 501)
            {
                sql += "LT501";
            }
            else if (totalWeight < 2001)
            {
                sql += "LT2001";
            }
            else if (totalWeight < 5001)
            {
                sql += "LT5001";
            }
            else //if(totalWeight < 10001)
            {
                sql += "LT10001";
            }

            sql += ", MIN FROM SQL_ALASKA_RATES WHERE ZIPCODE = " + zip;

            #endregion

            #region Get rate and min

            //double rate = 0;
            double min = 0;

            using (SqlConnection dbConn = new SqlConnection(connString))
            {
                dbConn.Open();

                using (DataSet ds1 = new DataSet())
                {
                    using (SqlDataAdapter da1 = new SqlDataAdapter(sql, dbConn))
                    {
                        ds1.Clear();
                        da1.Fill(ds1, "rate");

                        if (ds1.Tables["rate"].Rows.Count == 1)
                        {
                            rate = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(0).ToString());
                            min = Double.Parse(ds1.Tables["rate"].Rows[0].ItemArray.GetValue(1).ToString());
                        }
                        else
                        {
                            rate = 99999;
                            return;
                        }
                    }
                }
            }

            rate = rate * (totalWeight / 100);
            rate = rate * multiplier;

            if (rate < min)
            {
                rate = min;
            }

            #endregion

            if (.14 * (totalWeight / 100) > 1.15)
            {
                rate += .14 * (totalWeight / 100);
            }
            else
            {
                rate += 1.15;
            }

            //return rate;
        }

        #endregion

        #endregion

    }
}